<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.convenient.store.persistence.PostMapper">

	<!-- ReplyVO를 resultMap으로 맵핑함 -->
	<!-- resultMap type="반환할 타입(경로포함)" id="ResultMap의 이름" -->
	<resultMap type="www.convenient.store.model.ReplyVO"
		id="replyMap">
		<!-- result column="칼럼이름" property="VO의 필드(속성)이름"/ -->
		<result column="hierarchy_id" property="hierarchyId" />
		<result column="content" property="content" />
		<result column="writer_id" property="writer" />
		<result column="regdate" property="regdate" />
		<result column="updateDate" property="updateDate" />
	</resultMap>

	<!-- https://hyeonstorage.tistory.com/285 -->
	<!-- PostVO를 resultMap으로 맵핑함 -->
	<resultMap id="postMap"
		type="www.convenient.store.model.PostVO" extends="replyMap">
		<result property="title" column="title" />
		<result property="boardId" column="board_id" />
		<association property="reviewTarget"
			resultMap="reviewTgMap" />
	</resultMap>

	<!-- ReviewTargetVO를 resultMap으로 맵핑함 -->
	<resultMap id="reviewTgMap"
		type="www.convenient.store.model.ReviewTargetVO">
		<result property="hierarchyId" column="hierarchy_id" />
		<result property="objType" column="obj_type" />
		<result property="storeId" column="store_id" />
		<result property="prdAssort" column="prd_assort" />
		<result property="prdName" column="prd_name" />
		<result property="prdPrice" column="prd_price" />
		<result property="prdRate" column="prd_rate" />
	</resultMap>

	<!-- select id = "MapperInterface에서 정의한 메서드이름" parameterType = "표현식에 쓰일 
		파라미터 타입" resultMap = "select에 사용할 resultMap의 id" resultType = "반환할 타입" -->

	<!-- 조회 결과를 ReviewTargetVO 객체로 반환 -->
	<select id="findByReviewTargetId"
		resultType="www.convenient.store.model.ReviewTargetVO"
		resultMap="reviewTgMap">
		select * from review_target where
		hierarchy_id=#{hierarchyId}
	</select>

	<!-- 조회결과를 PostVO 객체로 반환 -->
	<select id="findByPostId"
		resultType="www.convenient.store.model.PostVO" resultMap="postMap">
		select p.*, rt.store_id, rt.prd_assort,
		rt.prd_name, rt.prd_price,
		rt.prd_rate
		from tbl_post p, review_target rt
		where
		p.hierarchy_id=rt.hierarchy_id
		AND p.hierarchy_id=#{hierarchyId}
		<![CDATA[AND p.obj_type='P']]>
	</select>
	
	<!-- 키워드를 포함하는 리뷰포스트의 총 개수를 구하는 쿼리 -->
	<select id="getPostTotalWithKeyword" resultType="int">
		SELECT count(<if test="keyword !=null and keyword !=''">count(</if>p.hierarchy_id<if test="keyword !=null and keyword !=''">)</if>)
		FROM
		tbl_post P
		<if test="keyword !=null and keyword !=''">
			,tbl_search_keyword SK
		</if>
		WHERE p.obj_type='P'
		<if test="keyword !=null and keyword !=''">
			AND p.hierarchy_id=sk.post_id
			AND sk.keyword_name in
			(#{keyword})
			GROUP BY post_id, p.title
		</if>
	</select>

	<sql id="selectAttribute">
		hierarchy_id, title, writer_id, regdate, updatedate
	</sql>

	<!-- 키워드를 포함하는 리뷰포스트의 목록 조회 -->
	<select id="getPostListWithKeywordPaging"
		resultType="www.convenient.store.model.PostVO" resultMap="postMap">
		SELECT
		<include refid="selectAttribute" />
		FROM(
		SELECT
		/*+INDEX_DESC(p index_post_reg_obj) */
		<include refid="selectAttribute" />
		,obj_type, rownum rn
		FROM
		(SELECT
		/*+INDEX_DESC(p index_post_reg_obj) */
		p.hierarchy_id, p.title, p.writer_id, p.regdate, p.updatedate,
		p.obj_type
		FROM
		tbl_post p
		<if test="keyword !=null and keyword !=''">
			,tbl_search_keyword sk
			WHERE p.hierarchy_id=sk.post_id
			AND
			sk.keyword_name in (#{keyword})
			GROUP BY post_id, p.title,
			p.writer_id, p.regdate, p.updatedate,
			p.hierarchy_id, p.obj_type
		</if>
		<![CDATA[
		) WHERE obj_type='P' AND regdate <=sysdate AND rownum <=#{pageNum} * #{amount}
		) WHERE rn > (#{pageNum}-1) * #{amount}
		]]>
	</select>

	<!-- https://aljjabaegi.tistory.com/528 -->
	<insert id="insertPost">
		<selectKey keyProperty="post.hierarchyId" order="BEFORE"
			resultType="string">
			select to62(seq_notice.nextval) from dual
		</selectKey>
		INSERT ALL
		INTO tbl_post(hierarchy_id, obj_type, content, writer_id, board_id, title)
		VALUES (#{post.hierarchyId}, 'P', #{post.content}, #{post.writer}, '2',
		#{post.title})
		INTO review_target (hierarchy_id, obj_type, store_id, prd_assort, prd_name,
		prd_price, prd_rate)
		VALUES (#{post.hierarchyId}, 'P', #{target.storeId}, #{target.prdAssort},
		#{target.prdName}, #{target.prdPrice}, #{target.prdRate})
		SELECT * FROM SYS.dual
	</insert>

	<!-- Oracle은 multi table update 지원을 안해줌. 그래서 각각 만들고 서비스에서 트랜잭션으로 묶어버림 -->
	<update id="updatePost">
		UPDATE tbl_post
		SET title=#{post.title},
		content=#{post.content}
		WHERE hierarchy_id=#{post.hierarchyId}
		AND
		obj_type='P'
	</update>

	<update id="updateReviewTarget">
		UPDATE review_target
		SET prd_name=#{target.prdName},
		prd_price=#{target.prdPrice},
		prd_rate=#{target.prdRate}
		WHERE
		hierarchy_id=#{post.hierarchyId}
		AND obj_type='P'
	</update>

	<delete id="deletePost">
		delete from tbl_post where
		hierarchy_id=#{hierarchyId} AND obj_type='P'
	</delete>

	<delete id="deleteReviewTarget">
		delete from review_target where
		hierarchy_id=#{hierarchyId}
	</delete>
</mapper>
